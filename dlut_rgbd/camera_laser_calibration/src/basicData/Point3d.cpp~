#include "Point3d.h"
#include <cmath>
//////////////////////////////////////////////////////////////////////////
CPoint3d::CPoint3d (void) :x (0), y (0), z (0) 
{
} CPoint3d::CPoint3d (float x, float y, float z) 
{
  this->x = x;
  this->y = y;
  this->z = z;
} CPoint3d::~CPoint3d (void) 
{
} CPoint3d::CPoint3d (const CPoint3d & tmpP) 
{
  this->x = tmpP.x;
  this->y = tmpP.y;
  this->z = tmpP.z;
} 

//////////////////////////////////////////////////////////////////////////
  CPoint3d & CPoint3d::operator += (const CPoint3d & p) 
{
  this->x += p.x;
  this->y += p.y;
  this->z += p.z;
  return *this;
}

CPoint3d & CPoint3d::operator -= (const CPoint3d & p) 
{
  this->x -= p.x;
  this->y -= p.y;
  this->z -= p.z;
  return *this;
}

CPoint3d & CPoint3d::operator *= (float s) 
{
  this->x *= s;
  this->y *= s;
  this->z *= s;
  return *this;
}

CPoint3d & CPoint3d::operator /= (float s) 
{
  this->x /= s;
  this->y /= s;
  this->z /= s;
  return *this;
}

CPoint3d operator + (const CPoint3d & p1, const CPoint3d & p2) 
{
  CPoint3d po;
  po.x = p1.x + p2.x;
  po.y = p1.y + p2.y;
  po.z = p1.z + p2.z;
  return po;
}

CPoint3d operator - (const CPoint3d & p1, const CPoint3d & p2) 
{
  CPoint3d po;
  po.x = p1.x - p2.x;
  po.y = p1.y - p2.y;
  po.z = p1.z - p2.z;
  return po;
}

CPoint3d operator * (const CPoint3d & p, float s) 
{
  CPoint3d po;
  po.x = p.x * s;
  po.y = p.y * s;
  po.z = p.z * s;
  return po;
}

float operator * (const CPoint3d & p1, const CPoint3d & p2) 
{
  return (p1.x * p2.x + p1.y * p2.y + p1.z * p2.z);
}

CPoint3d operator / (const CPoint3d & p, float num) 
{
  if (num != 0)
    
  {
    CPoint3d po;
    po.x = p.x / num;
    po.y = p.y / num;
    po.z = p.z / num;
    return po;
  }
  
  else
    
  {
    return CPoint3d (0, 0, 0);
  }
}

CPoint3d operator ^ (const CPoint3d & p1, const CPoint3d & p2) 
{
  CPoint3d po (p1.y * p2.z - p1.z * p2.y, p1.z * p2.x - p1.x * p2.z, p1.x * p2.y - p1.y * p2.x );
  return po;
}

bool operator < (const CPoint3d & p1, const CPoint3d & p2) 
{
  return (p1.z != p2.z) ? (p1.z < p2.z) : (p1.y != p2.y) ? (p1.y < p2.y) : (p1.x < p2.x);
}

bool operator > (const CPoint3d & p1, const CPoint3d & p2) 
{
  return (p1.z != p2.z) ? (p1.z > p2.z) : (p1.y != p2.y) ? (p1.y > p2.y) : (p1.x > p2.x);
}

bool operator == (const CPoint3d & p1, const CPoint3d & p2) 
{
  if (p1.x == p2.x && p1.y == p2.y && p1.z == p2.z)
    return true;
  
  else
    return false;
}

bool operator != (const CPoint3d & p1, const CPoint3d & p2) 
{
  if (p1.x == p2.x && p1.y == p2.y && p1.z == p2.z)
    return false;
  
  else
    return true;
}


//////////////////////////////////////////////////////////////////////////
     float CPoint3d::cpDist (void) const const const 
     {
       return sqrt (x * x + y * y + z * z);
     }

      float CPoint3d::cpSquaredNorm () const const const 
     {
       return (this->x * this->x + this->y * this->y + this->z * this->z);
     }

      float CPoint3d::cpDot (const CPoint3d & p) const const const 
     {
       return (*this) * p;
     }

 CPoint3d & CPoint3d::cpNormalize () 
{
  float n = float (sqrt (this->x * this->x + this->y * this->y + this->z * this->z));
  if (n > float (0))
  {
    this->x /= n;
    this->y /= n;
    this->z /= n;
  }
  return *this;
}


